{
  "info": {
    "_postman_id": "3a46c247-6a0e-4692-80c4-a5d63503a3eb",
    "name": "Diploma part 3: feature subscribtion Copy",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "26333653"
  },
  "item": [
    {
      "name": "Create new user",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    let user;",
              "    try {",
              "        user = rnd.getUser();",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "",
              "    pm.request.body.update({",
              "        mode: 'raw',",
              "        raw: JSON.stringify(user),",
              "        options: { raw: { language: 'json' } }",
              "    });",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код 201\", function () {",
              "    pm.response.to.have.status(201);",
              "    pm.response.to.be.withBody;",
              "});",
              "",
              "const source = JSON.parse(pm.request.body.raw);",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Юзер должен содержать поля: id, allowSubscription\", function () {",
              "pm.expect(target).to.have.property('id');",
              "pm.expect(target).to.have.property('allowSubscription');",
              "});",
              "",
              "pm.test(\"Id и allowSubscription в запросе и ответе должны совпадать\", function () {",
              "    pm.expect(target.id).to.not.be.null;",
              "    pm.expect(target.allowSubscription).to.not.be.null;",
              "    pm.expect(target.allowSubscription).to.eq(true);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update user settings",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Сервер в ответ должен возвращать код 200\", function () {",
              "    pm.response.to.be.ok;    ",
              "    pm.response.to.be.withBody;",
              "});",
              "",
              "const source = pm.collectionVariables.get('response_1');",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Поля id и allowSubscription обязательны\", function () {",
              "pm.expect(target).to.have.property('allowSubscription');",
              "});",
              "",
              "// pm.test(\"allowSubscription должно изменить значение с true на false\", function () {",
              "//     pm.expect(source.allowSubscription).equal(true, \"allowSubscription изначально true\")",
              "//     pm.expect(target.allowSubscription).equal(false, 'allowSubscription в ответе должен быть false')",
              "// });"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        rndUser = rnd.getUser();",
              "        const user = await api.addUser(rndUser);",
              "        pm.collectionVariables.set(\"user_id1\", user.id);",
              "        pm.collectionVariables.set(\"response_1\", user)",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "",
              "    pm.request.body.update({",
              "        mode: 'raw',",
              "        raw: JSON.stringify({",
              "            allowSubscription: false",
              "        }),",
              "        options: { raw: { language: 'json' } }",
              "    });",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/update",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "update"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{user_id1}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create subscribtion",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен быть со статусом 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "const target = pm.response.json();",
              "",
              "// pm.test(\"PersonId и SubscriberId должны совпадать\", function () {",
              "//     pm.expect(target.id).to.not.be.null;",
              "//     pm.expect(target.person.id).equal(pm.collectionVariables.get('user_id22'));",
              "//     pm.expect(target.subscriber.id).equal(pm.collectionVariables.get('user_id2'));    ",
              "// });",
              "",
              "pm.test(\"Поля id, person и subscriber в ответе обязательны\", function() {",
              "    pm.expect(target).to.have.property('id');",
              "    pm.expect(target).to.have.property('subscriber');    ",
              "    pm.expect(target).to.have.property('person');",
              "    ",
              "})",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        user1 = await api.addUser(rnd.getUser());",
              "        user2 = await api.addUser(rnd.getUser());",
              "",
              "        pm.collectionVariables.set(\"user_id2\", user1.id);",
              "        pm.collectionVariables.set(\"user_id22\", user2.id);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/subscriptions?personId={{user_id22}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "subscriptions"
          ],
          "query": [
            {
              "key": "personId",
              "value": "{{user_id22}}"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{user_id2}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create subscribption failed",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен вернуться с кодом 409\", function () {",
              "    pm.response.to.have.status(409);",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        user1 = await api.addUser(rnd.getUser());",
              "        ",
              "        person = rnd.getUser();",
              "        person.allowSubscription = false;",
              "        user2 = await api.addUser(person);",
              "        ",
              "        pm.collectionVariables.set(\"user_id\", user1.id);",
              "        pm.collectionVariables.set(\"user_id2\", user2.id);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/subscriptions?personId={{user_id2}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "subscriptions"
          ],
          "query": [
            {
              "key": "personId",
              "value": "{{user_id2}}"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{user_id}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Remove subscribtion",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен быть со статусом 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});",
              "",
              "const userId = pm.collectionVariables.get('user_id');",
              "const subscriptionId = pm.collectionVariables.get('subscriptionId');",
              "",
              "let body;",
              "const req = {",
              "                url: \"http://localhost:8080/users/\" + userId + \"/subscriptions/\" + subscriptionId,",
              "                method: \"GET\", body: body == null ? \"\" : JSON.stringify(body),",
              "                header: { \"Content-Type\": \"application/json\" },",
              "            };",
              "",
              "pm.sendRequest(req, (error, response) => {",
              "    pm.test(\"После выполнения запроса подписка не должна быть доступна\", function(){",
              "        pm.expect(response).to.have.status(404);",
              "    });",
              "})"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        user1 = await api.addUser(rnd.getUser());",
              "        user2 = await api.addUser(rnd.getUser());",
              "",
              "        pm.collectionVariables.set(\"user_id\", user1.id);",
              "        pm.collectionVariables.set(\"user_id2\", user2.id);",
              "",
              "        subscription = await api.addSubscription(user1.id, user2.id);",
              "        pm.collectionVariables.set(\"subscriptionId\", subscription.id);",
              "",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/subscriptions/:subscriptionId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "subscriptions",
            ":subscriptionId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{user_id}}"
            },
            {
              "key": "subscriptionId",
              "value": "{{subscriptionId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get users subscribtions",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        user1 = await api.addUser(rnd.getUser());",
              "        user2 = await api.addUser(rnd.getUser());",
              "        user3 = await api.addUser(rnd.getUser());",
              "",
              "        pm.collectionVariables.set(\"user_id\", user1.id);",
              "",
              "        subscription = await api.addSubscription(user1.id, user2.id);",
              "        subscription = await api.addSubscription(user1.id, user3.id);",
              "",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен быть со статусом 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "const target = pm.response.json();",
              "pm.test(\"В ответе должно быть 2 подписки\", function () {",
              "    pm.expect(target.length).to.eql(2);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/subscriptions",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "subscriptions"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{user_id}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get subscribtion by id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Код ответа должен быть 200\", function () {",
              "    pm.response.to.be.ok;    ",
              "    pm.response.to.be.withBody;",
              "});",
              "",
              "const target = pm.response.json();",
              "pm.test(\"Поля в id, person и subscriber в подписке обязательны\", function () {",
              "    pm.expect(target).to.have.property('id');",
              "    pm.expect(target).to.have.property('person');",
              "    pm.expect(target).to.have.property('subscriber');",
              "    ",
              "});",
              "",
              "pm.test(\"id подписанного пользвателя и пользователя, на которого подписаны, должны совпадать.\", function() {",
              "    pm.expect(target.person.id).equal(pm.collectionVariables.get('user_id23'));",
              "    pm.expect(target.subscriber.id).equal(pm.collectionVariables.get('user_id3'));    ",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        user1 = await api.addUser(rnd.getUser());",
              "        user2 = await api.addUser(rnd.getUser());",
              "",
              "        pm.collectionVariables.set(\"user_id3\", user1.id);",
              "        pm.collectionVariables.set(\"user_id23\", user2.id);",
              "",
              "        subscription = await api.addSubscription(user1.id, user2.id);",
              "        pm.collectionVariables.set(\"subscriptionId\", subscription.id);",
              "",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/subscriptions/:subscriptionId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "subscriptions",
            ":subscriptionId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{user_id3}}"
            },
            {
              "key": "subscriptionId",
              "value": "{{subscriptionId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get events",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен быть со статусом 200\", function () {",
              "    pm.response.to.be.ok;    ",
              "    pm.response.to.be.withBody;",
              "});",
              "",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Должно быть 1 событие\", function() {",
              "    pm.expect(target.length).equal(1);",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        user1 = await api.addUser(rnd.getUser());",
              "        user2 = await api.addUser(rnd.getUser());",
              "",
              "        pm.collectionVariables.set(\"user_id\", user1.id);",
              "        pm.collectionVariables.set(\"user_id2\", user2.id);",
              "",
              "        subscription = await api.addSubscription(user1.id, user2.id);",
              "        pm.collectionVariables.set(\"subscriptionId\", subscription.id);",
              "",
              "        category = await api.addCategory(rnd.getCategory());",
              "        newEvent = await api.addEvent(user2.id, rnd.getEvent(category.id));        ",
              "",
              "        newEvent = await api.publishEvent(newEvent.id);",
              "",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/subscriptions/events",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "subscriptions",
            "events"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{user_id}}"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addSubscription(userId, personId, verbose = null) {",
          "        return this.post(\"/users/\" + userId + \"/subscriptions?personId=\" + personId, null, \"Ошибка создания подписки.\", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "    ",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "",
          "                    resolve(response.json());",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "}",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "    ",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "}   "
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "response",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "1",
      "type": "number"
    },
    {
      "key": "request_body",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id2",
      "value": "1",
      "type": "number"
    },
    {
      "key": "subscriptionId",
      "value": "1",
      "type": "number"
    },
    {
      "key": "user_id1",
      "value": "",
      "type": "number"
    },
    {
      "key": "response_1",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id2",
      "value": "",
      "type": "number"
    },
    {
      "key": "user_id22",
      "value": "",
      "type": "number"
    },
    {
      "key": "user_id3",
      "value": "",
      "type": "number"
    },
    {
      "key": "user_id23",
      "value": "",
      "type": "number"
    }
  ]
}